<Project DefaultTargets="Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">

  <!-- Settings -->

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <ParallelizeTests Condition="'$(ParallelizeTests)' == ''">true</ParallelizeTests>
    <MaxParallelThreads Condition="'$(MaxParallelThreads)' == ''">0</MaxParallelThreads>
    <TrackFileAccess>false</TrackFileAccess>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\</SolutionDir>
    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(SolutionDir).nuget\nuget.exe</NuGetExePath>
    <RequestedVerbosity Condition=" '$(RequestedVerbosity)' == '' ">normal</RequestedVerbosity>
  </PropertyGroup>
  <ItemGroup>
    <NuspecFiles Include="**\*.nuspec" />
    <NuGetNuspecTargets Include="src\*.nuspec" />
  </ItemGroup>
  <ItemGroup Condition=" '$(PackageSources)' == '' ">
    <PackageSource Include="https://nuget.org/api/v2/" />
  </ItemGroup>

  <!-- Cascading attempts to find a build number -->

  <PropertyGroup Condition="'$(BuildNumber)' == ''">
    <BuildNumber>$(BUILD_NUMBER)</BuildNumber>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BuildNumber)' == ''">
    <BuildNumber>0</BuildNumber>
  </PropertyGroup>

  <!-- Build server targets -->

  <Target Name="CI" DependsOnTargets="PackageRestore;SetVersionNumber;Test;GitLink;Packages;PushMyGet" />

  <Target Name="NuGets" DependsOnTargets="PackageRestore;Test;GitLink;Packages" />

  <!-- Individiual targets -->

  <Target Name="PackageRestore" DependsOnTargets="_DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command="$(NuGetExePath) restore $(SolutionDir)MiFareRT.sln -NonInteractive -Source @(PackageSource) -Verbosity quiet" />
  </Target>

  <Target Name="Build" DependsOnTargets="PackageRestore">
    <MSBuild
        Projects="MiFareRT.sln"
        Targets="Build"
        Properties="Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)"/>
  </Target>

  <Target Name="Test" DependsOnTargets="Build">
    <!-- TODO: add unit tests here, if desired -->
  </Target>

  <Target Name="Help" DependsOnTargets="Build">
    <Exec Command='"C:\Program Files (x86)\EWSoftware\Sandcastle Help File Builder\SandcastleBuilderConsole.exe" help\xunit.shfb' />
  </Target>

  <Target Name='GitLink'>
    <Exec Command='.nuget\GitLink.exe $(MSBuildThisFileDirectory) -u https://github.com/onovotny/MiFareRT -commit $(CommitHash)' IgnoreExitCode='true' Condition="'$(CommitHash)' != '' " />
    <Exec Command='.nuget\GitLink.exe $(MSBuildThisFileDirectory) -u https://github.com/onovotny/MiFareRT' IgnoreExitCode='true' Condition="'$(CommitHash)' == '' " />
  </Target>

  <Target Name="SetVersionNumber">
    <RegexReplace
        Pattern='AssemblyVersion\("(\d+\.\d+\.\d+)\.\d+"\)'
        Replacement='AssemblyVersion("$1.$(BuildNumber)")'
        Files='src\common\GlobalAssemblyInfo.cs'/>
    <RegexReplace
        Pattern='&lt;version&gt;(\d+\.\d+\.\d+(-[A-Za-z0-9-]+)?)&lt;'
        Replacement='&lt;version&gt;$1-build$(BuildNumber)&lt;'
        Files='@(NuspecFiles)'/>
    <RegexReplace
        Pattern='version=&quot;\[(\d+\.\d+\.\d+(-[A-Za-z0-9-]+)?)\]&quot;'
        Replacement='version=&quot;[$1-build$(BuildNumber)]&quot;'
        Files='@(NuspecFiles)'/>
  </Target>

  <Target Name='Packages'>
    <Exec Command='.nuget\NuGet.exe pack %(NuGetNuspecTargets.Identity) -NoPackageAnalysis -NonInteractive -Verbosity quiet' />
  </Target>



  <Target Name="PushMyGet">
    <ItemGroup>
      <NupkgSymbolsFiles Include="*.symbols.nupkg" />
      <NupkgFiles Include="*.nupkg" Exclude="@(NupkgSymbolsFiles)" />
    </ItemGroup>
    <Exec Command=".nuget\NuGet.exe push %(NupkgFiles.Identity) -NonInteractive -Source https://www.myget.org/F/xunit-xamarin/api/v2/package" />
    <Exec Command=".nuget\NuGet.exe push %(NupkgSymbolsFiles.Identity) -NonInteractive -Source https://nuget.symbolsource.org/MyGet/xunit-xamarin" />
  </Target>

  <Target Name="_DownloadNuGet">
    <MakeDir Directories="$(SolutionDir).nuget" />
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition="!Exists('$(NuGetExePath)')" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          try {
              OutputFilename = Path.GetFullPath(OutputFilename);

              Log.LogMessage("Downloading latest version of NuGet.exe...");
              WebClient webClient = new WebClient();
              webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

              return true;
          }
          catch (Exception ex) {
              Log.LogErrorFromException(ex);
              return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>